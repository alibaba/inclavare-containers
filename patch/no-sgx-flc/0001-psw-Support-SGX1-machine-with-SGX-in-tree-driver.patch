From 3d8cb6ba2017d03282c25d8f5126418f456203d2 Mon Sep 17 00:00:00 2001
From: Jia Zhang <zhang.jia@linux.alibaba.com>
Date: Wed, 29 Jul 2020 11:20:40 +0800
Subject: [PATCH] psw: Support SGX1 machine with SGX in-tree driver

There are still lots of SGX1 machines without FLC support deployed
in filed. These machines eventually needs to be migrated to be supported
by SGX in-tree driver which is product-ready and well-maintained.

This patch targets to address the gap between SGX1 machine and SGX
in-tree driver. This patch is incomplete. In theory, reading cpuid,
msr and driver type probe can decide whether SGX1 without FLC support
and SGX in-tree driver are placed together and internally set
no_sgx_flc flag.

Signed-off-by: Jia Zhang <zhang.jia@linux.alibaba.com>
Signed-off-by: Liang Yang <liang3.yang@intel.com>
---
 psw/enclave_common/sgx_enclave_common.cpp |  8 ++++++--
 psw/urts/enclave_creator_hw_com.cpp       | 10 +++++++++-
 psw/urts/linux/urts_internal.cpp          |  3 ++-
 3 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/psw/enclave_common/sgx_enclave_common.cpp b/psw/enclave_common/sgx_enclave_common.cpp
index 8131223..e4394b0 100644
--- a/psw/enclave_common/sgx_enclave_common.cpp
+++ b/psw/enclave_common/sgx_enclave_common.cpp
@@ -52,6 +52,7 @@
 #define SGX_GET_LAUNCH_TOKEN "get_launch_token"
 
 func_get_launch_token_t get_launch_token_func = NULL;
+bool no_sgx_flc = true;
 
 static void* s_hdlopen = NULL;
 static se_mutex_t s_dlopen_mutex;
@@ -807,7 +808,7 @@ extern "C" bool COMM_API enclave_initialize(
     }
 
     int ret = 0;
-    if ( s_driver_type == SGX_DRIVER_OUT_OF_TREE )
+    if ( s_driver_type == SGX_DRIVER_OUT_OF_TREE || no_sgx_flc)
     {
         //out-of-tree driver requires a launch token to be provided
         se_mutex_lock(&s_enclave_mutex);
@@ -846,7 +847,10 @@ extern "C" bool COMM_API enclave_initialize(
         initp.sigstruct = POINTER_TO_U64(enclave_css);
         initp.einittoken = POINTER_TO_U64(&launch_token);
 
-        ret = ioctl(s_hdevice, SGX_IOC_ENCLAVE_INIT, &initp);
+        if (hfile != -1)
+            ret = ioctl(hfile, SGX_IOC_ENCLAVE_INIT, &initp);
+        else
+            ret = ioctl(s_hdevice, SGX_IOC_ENCLAVE_INIT, &initp);
     } 
     else if (s_driver_type == SGX_DRIVER_DCAP )
     {
diff --git a/psw/urts/enclave_creator_hw_com.cpp b/psw/urts/enclave_creator_hw_com.cpp
index 28d10a4..3d6c760 100644
--- a/psw/urts/enclave_creator_hw_com.cpp
+++ b/psw/urts/enclave_creator_hw_com.cpp
@@ -43,6 +43,9 @@
 
 #define EDMM_ENABLE_BIT 0x1ULL
 
+extern "C" bool get_driver_type(int *driver_type);
+extern bool no_sgx_flc;
+
 bool EnclaveCreatorHW::use_se_hw() const
 {
     return true;
@@ -164,6 +167,10 @@ int EnclaveCreatorHW::init_enclave(sgx_enclave_id_t enclave_id, enclave_css_t *e
     UNUSED(lc);
 
     unsigned int ret = 0;
+    int driver_type;
+
+    if (!get_driver_type(&driver_type))
+        return SGX_ERROR_UNEXPECTED;
 
     enclave_css_t css;
     memcpy_s(&css, sizeof(enclave_css_t), enclave_css, sizeof(enclave_css_t));
@@ -178,7 +185,8 @@ int EnclaveCreatorHW::init_enclave(sgx_enclave_id_t enclave_id, enclave_css_t *e
         {
             // LE is loaded with the interface sgx_create_le.
             // Read the input prd css file and use it to init again.
-            if(SGX_ERROR_INVALID_ATTRIBUTE == ret && prd_css_file != NULL) {
+            // Note that in-tree kernel driver never expose SGX_ERROR_INVALID_ATTRIBUTE.
+            if((SGX_ERROR_INVALID_ATTRIBUTE == ret || (no_sgx_flc && driver_type == SGX_DRIVER_IN_KERNEL)) && prd_css_file != NULL) {
                 if((ret = read_prd_css(prd_css_file->prd_css_name, &css)) != SGX_SUCCESS)
                 {
                     return ret;
diff --git a/psw/urts/linux/urts_internal.cpp b/psw/urts/linux/urts_internal.cpp
index 502f7b5..1885830 100644
--- a/psw/urts/linux/urts_internal.cpp
+++ b/psw/urts/linux/urts_internal.cpp
@@ -46,6 +46,7 @@
 extern sgx_status_t _create_enclave(const bool debug, se_file_handle_t pfile, se_file_t& file, le_prd_css_file_t *prd_css_file, sgx_launch_token_t *launch, int *launch_updated, sgx_enclave_id_t *enclave_id, sgx_misc_attribute_t *misc_attr);
 
 extern func_get_launch_token_t get_launch_token_func;
+extern bool no_sgx_flc;
 
 extern "C" void init_get_launch_token(const func_get_launch_token_t func)
 {
@@ -90,6 +91,6 @@ extern "C" sgx_status_t sgx_create_le(const char* file_name, const char* prd_css
 extern "C" bool is_launch_token_required()
 {
     //noly out of tree driver need to get launch token
-    return is_out_of_tree_driver();
+    return no_sgx_flc || is_out_of_tree_driver();
 }
 
-- 
1.8.3.1

