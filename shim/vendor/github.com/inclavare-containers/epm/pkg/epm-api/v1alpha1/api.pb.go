// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: api.proto

package v1alpha1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Cache represents the metadata of a cache managed by enclave pool.
type Cache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subtype of enclave pool which represents a more find-grained pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache and the id is unique in the same type of enclave pool
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	// SavePath represents the absolute path to store the cache
	SavePath string `protobuf:"bytes,4,opt,name=savePath,proto3" json:"savePath,omitempty"`
	// Parent represents the parent cache of the current cache, if do not have a parent the value is nil
	Parent *Cache `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Size represents the size in bytes of the cache
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Created represents the creation time of the cache which is the number of seconds elapsed since January 1, 1970 UTC
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	// Options is an optional field which can extend any type of data structure
	Options *any.Any `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Cache) Reset() {
	*x = Cache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *Cache) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Cache) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *Cache) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Cache) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *Cache) GetParent() *Cache {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Cache) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Cache) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Cache) GetOptions() *any.Any {
	if x != nil {
		return x.Options
	}
	return nil
}

// GetCacheRequest
type GetCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCacheRequest) Reset() {
	*x = GetCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheRequest) ProtoMessage() {}

func (x *GetCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheRequest.ProtoReflect.Descriptor instead.
func (*GetCacheRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetCacheRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetCacheRequest) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *GetCacheRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cache represents the response cache metadata
	Cache *Cache `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *GetCacheResponse) Reset() {
	*x = GetCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheResponse) ProtoMessage() {}

func (x *GetCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheResponse.ProtoReflect.Descriptor instead.
func (*GetCacheResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetCacheResponse) GetCache() *Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

// PickCacheRequest
type PickCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// Filters represents the filters that used to filter out the suitable result
	Filters map[string]string `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PickCacheRequest) Reset() {
	*x = PickCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickCacheRequest) ProtoMessage() {}

func (x *PickCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickCacheRequest.ProtoReflect.Descriptor instead.
func (*PickCacheRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *PickCacheRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PickCacheRequest) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *PickCacheRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type PickCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Caches represents the caches which match the selection criteria
	Caches []*Cache `protobuf:"bytes,1,rep,name=caches,proto3" json:"caches,omitempty"`
}

func (x *PickCacheResponse) Reset() {
	*x = PickCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickCacheResponse) ProtoMessage() {}

func (x *PickCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickCacheResponse.ProtoReflect.Descriptor instead.
func (*PickCacheResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *PickCacheResponse) GetCaches() []*Cache {
	if x != nil {
		return x.Caches
	}
	return nil
}

type SaveCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cache represents the cache metadata needs to be saved
	Cache *Cache `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
	// SourcePath represents the absolute path of source cache data
	SourcePath string `protobuf:"bytes,2,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
}

func (x *SaveCacheRequest) Reset() {
	*x = SaveCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCacheRequest) ProtoMessage() {}

func (x *SaveCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCacheRequest.ProtoReflect.Descriptor instead.
func (*SaveCacheRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *SaveCacheRequest) GetCache() *Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

func (x *SaveCacheRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

type SaveCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ok represents whether the cache is saved successfully
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *SaveCacheResponse) Reset() {
	*x = SaveCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCacheResponse) ProtoMessage() {}

func (x *SaveCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCacheResponse.ProtoReflect.Descriptor instead.
func (*SaveCacheResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *SaveCacheResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type ListCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// LastCacheID represents the id of the last cache metadata in the most recent query list,
	// if the value is "", query the cache metadata from the starting point of DB,
	// otherwise query the cache metadata starting from the next id of `lastCacheID` in alphabetical order
	LastCacheID string `protobuf:"bytes,3,opt,name=lastCacheID,proto3" json:"lastCacheID,omitempty"`
	// Limit represents the maximum number of queried entries
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListCacheRequest) Reset() {
	*x = ListCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCacheRequest) ProtoMessage() {}

func (x *ListCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCacheRequest.ProtoReflect.Descriptor instead.
func (*ListCacheRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListCacheRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListCacheRequest) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *ListCacheRequest) GetLastCacheID() string {
	if x != nil {
		return x.LastCacheID
	}
	return ""
}

func (x *ListCacheRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Caches represents the list of response caches
	Caches []*Cache `protobuf:"bytes,1,rep,name=caches,proto3" json:"caches,omitempty"`
}

func (x *ListCacheResponse) Reset() {
	*x = ListCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCacheResponse) ProtoMessage() {}

func (x *ListCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCacheResponse.ProtoReflect.Descriptor instead.
func (*ListCacheResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *ListCacheResponse) GetCaches() []*Cache {
	if x != nil {
		return x.Caches
	}
	return nil
}

type DeleteCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCacheRequest) Reset() {
	*x = DeleteCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCacheRequest) ProtoMessage() {}

func (x *DeleteCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCacheRequest.ProtoReflect.Descriptor instead.
func (*DeleteCacheRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCacheRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeleteCacheRequest) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *DeleteCacheRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ok represents whether the cache is deleted successfully
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *DeleteCacheResponse) Reset() {
	*x = DeleteCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCacheResponse) ProtoMessage() {}

func (x *DeleteCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCacheResponse.ProtoReflect.Descriptor instead.
func (*DeleteCacheResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCacheResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type LoadCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	// TargetPath represents the work directory for loading the cache data
	TargetPath string `protobuf:"bytes,4,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
}

func (x *LoadCacheRequest) Reset() {
	*x = LoadCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCacheRequest) ProtoMessage() {}

func (x *LoadCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCacheRequest.ProtoReflect.Descriptor instead.
func (*LoadCacheRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *LoadCacheRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LoadCacheRequest) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *LoadCacheRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *LoadCacheRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type LoadCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ok represents whether the cache is loaded successfully
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *LoadCacheResponse) Reset() {
	*x = LoadCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCacheResponse) ProtoMessage() {}

func (x *LoadCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCacheResponse.ProtoReflect.Descriptor instead.
func (*LoadCacheResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *LoadCacheResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe8, 0x01, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x63, 0x6b,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x11, 0x50, 0x69, 0x63,
	0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x05, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x23, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x78, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x3c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x22,
	0x52, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x70, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x23, 0x0a, 0x11,
	0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x32, 0x94, 0x04, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x09, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x1a, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1a, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_proto_goTypes = []interface{}{
	(*Cache)(nil),               // 0: v1alpha1.Cache
	(*GetCacheRequest)(nil),     // 1: v1alpha1.GetCacheRequest
	(*GetCacheResponse)(nil),    // 2: v1alpha1.GetCacheResponse
	(*PickCacheRequest)(nil),    // 3: v1alpha1.PickCacheRequest
	(*PickCacheResponse)(nil),   // 4: v1alpha1.PickCacheResponse
	(*SaveCacheRequest)(nil),    // 5: v1alpha1.SaveCacheRequest
	(*SaveCacheResponse)(nil),   // 6: v1alpha1.SaveCacheResponse
	(*ListCacheRequest)(nil),    // 7: v1alpha1.ListCacheRequest
	(*ListCacheResponse)(nil),   // 8: v1alpha1.ListCacheResponse
	(*DeleteCacheRequest)(nil),  // 9: v1alpha1.DeleteCacheRequest
	(*DeleteCacheResponse)(nil), // 10: v1alpha1.DeleteCacheResponse
	(*LoadCacheRequest)(nil),    // 11: v1alpha1.LoadCacheRequest
	(*LoadCacheResponse)(nil),   // 12: v1alpha1.LoadCacheResponse
	nil,                         // 13: v1alpha1.PickCacheRequest.FiltersEntry
	(*any.Any)(nil),             // 14: google.protobuf.Any
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: v1alpha1.Cache.parent:type_name -> v1alpha1.Cache
	14, // 1: v1alpha1.Cache.options:type_name -> google.protobuf.Any
	0,  // 2: v1alpha1.GetCacheResponse.cache:type_name -> v1alpha1.Cache
	13, // 3: v1alpha1.PickCacheRequest.filters:type_name -> v1alpha1.PickCacheRequest.FiltersEntry
	0,  // 4: v1alpha1.PickCacheResponse.caches:type_name -> v1alpha1.Cache
	0,  // 5: v1alpha1.SaveCacheRequest.cache:type_name -> v1alpha1.Cache
	0,  // 6: v1alpha1.ListCacheResponse.caches:type_name -> v1alpha1.Cache
	1,  // 7: v1alpha1.EnclavePoolManager.GetCache:input_type -> v1alpha1.GetCacheRequest
	3,  // 8: v1alpha1.EnclavePoolManager.PickCache:input_type -> v1alpha1.PickCacheRequest
	5,  // 9: v1alpha1.EnclavePoolManager.SaveCache:input_type -> v1alpha1.SaveCacheRequest
	5,  // 10: v1alpha1.EnclavePoolManager.SaveFinalCache:input_type -> v1alpha1.SaveCacheRequest
	7,  // 11: v1alpha1.EnclavePoolManager.ListCache:input_type -> v1alpha1.ListCacheRequest
	9,  // 12: v1alpha1.EnclavePoolManager.DeleteCache:input_type -> v1alpha1.DeleteCacheRequest
	11, // 13: v1alpha1.EnclavePoolManager.LoadCache:input_type -> v1alpha1.LoadCacheRequest
	2,  // 14: v1alpha1.EnclavePoolManager.GetCache:output_type -> v1alpha1.GetCacheResponse
	4,  // 15: v1alpha1.EnclavePoolManager.PickCache:output_type -> v1alpha1.PickCacheResponse
	6,  // 16: v1alpha1.EnclavePoolManager.SaveCache:output_type -> v1alpha1.SaveCacheResponse
	6,  // 17: v1alpha1.EnclavePoolManager.SaveFinalCache:output_type -> v1alpha1.SaveCacheResponse
	8,  // 18: v1alpha1.EnclavePoolManager.ListCache:output_type -> v1alpha1.ListCacheResponse
	10, // 19: v1alpha1.EnclavePoolManager.DeleteCache:output_type -> v1alpha1.DeleteCacheResponse
	12, // 20: v1alpha1.EnclavePoolManager.LoadCache:output_type -> v1alpha1.LoadCacheResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnclavePoolManagerClient is the client API for EnclavePoolManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnclavePoolManagerClient interface {
	// GetCache represents get the specified cache from pool
	GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error)
	// PickCache represents pick a suitable cache from pool
	PickCache(ctx context.Context, in *PickCacheRequest, opts ...grpc.CallOption) (*PickCacheResponse, error)
	// SaveCache represents save the data to a cache directory and record the cache metadata
	SaveCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error)
	// SaveFinalCache represents save the enclave info which can be used instantly
	SaveFinalCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error)
	// ListCache represents list part of or all of the cache metadata
	ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error)
	// DeleteCache represents delete the specified cached data and remove the corresponding cache metadata
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error)
	// LoadCache represents load the specified cache data to work directory
	LoadCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error)
}

type enclavePoolManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnclavePoolManagerClient(cc grpc.ClientConnInterface) EnclavePoolManagerClient {
	return &enclavePoolManagerClient{cc}
}

func (c *enclavePoolManagerClient) GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error) {
	out := new(GetCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/GetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) PickCache(ctx context.Context, in *PickCacheRequest, opts ...grpc.CallOption) (*PickCacheResponse, error) {
	out := new(PickCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/PickCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) SaveCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error) {
	out := new(SaveCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/SaveCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) SaveFinalCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error) {
	out := new(SaveCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/SaveFinalCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error) {
	out := new(ListCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/ListCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error) {
	out := new(DeleteCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/DeleteCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) LoadCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error) {
	out := new(LoadCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/LoadCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnclavePoolManagerServer is the server API for EnclavePoolManager service.
type EnclavePoolManagerServer interface {
	// GetCache represents get the specified cache from pool
	GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error)
	// PickCache represents pick a suitable cache from pool
	PickCache(context.Context, *PickCacheRequest) (*PickCacheResponse, error)
	// SaveCache represents save the data to a cache directory and record the cache metadata
	SaveCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error)
	// SaveFinalCache represents save the enclave info which can be used instantly
	SaveFinalCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error)
	// ListCache represents list part of or all of the cache metadata
	ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error)
	// DeleteCache represents delete the specified cached data and remove the corresponding cache metadata
	DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error)
	// LoadCache represents load the specified cache data to work directory
	LoadCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error)
}

// UnimplementedEnclavePoolManagerServer can be embedded to have forward compatible implementations.
type UnimplementedEnclavePoolManagerServer struct {
}

func (*UnimplementedEnclavePoolManagerServer) GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) PickCache(context.Context, *PickCacheRequest) (*PickCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) SaveCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) SaveFinalCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFinalCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) LoadCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCache not implemented")
}

func RegisterEnclavePoolManagerServer(s *grpc.Server, srv EnclavePoolManagerServer) {
	s.RegisterService(&_EnclavePoolManager_serviceDesc, srv)
}

func _EnclavePoolManager_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).GetCache(ctx, req.(*GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_PickCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).PickCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/PickCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).PickCache(ctx, req.(*PickCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_SaveCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).SaveCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/SaveCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).SaveCache(ctx, req.(*SaveCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_SaveFinalCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).SaveFinalCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/SaveFinalCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).SaveFinalCache(ctx, req.(*SaveCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_ListCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).ListCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/ListCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).ListCache(ctx, req.(*ListCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/DeleteCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).DeleteCache(ctx, req.(*DeleteCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_LoadCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).LoadCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/LoadCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).LoadCache(ctx, req.(*LoadCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnclavePoolManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.EnclavePoolManager",
	HandlerType: (*EnclavePoolManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCache",
			Handler:    _EnclavePoolManager_GetCache_Handler,
		},
		{
			MethodName: "PickCache",
			Handler:    _EnclavePoolManager_PickCache_Handler,
		},
		{
			MethodName: "SaveCache",
			Handler:    _EnclavePoolManager_SaveCache_Handler,
		},
		{
			MethodName: "SaveFinalCache",
			Handler:    _EnclavePoolManager_SaveFinalCache_Handler,
		},
		{
			MethodName: "ListCache",
			Handler:    _EnclavePoolManager_ListCache_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _EnclavePoolManager_DeleteCache_Handler,
		},
		{
			MethodName: "LoadCache",
			Handler:    _EnclavePoolManager_LoadCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
