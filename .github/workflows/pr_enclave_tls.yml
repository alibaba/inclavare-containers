name: Run enclave-tls

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

env:
  ALINUX2_PROTOBUF_C_VERSION: 1.0.2
  ENCLAVE_TLS_BINDIR: /usr/share/enclave-tls/samples
  ENCLAVE_TLS_ROOTDIR: /opt/enclave-tls

jobs:
  rune_enclave_tls:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: ${{ matrix.sgx }}
    strategy:
      matrix:
        sgx: [[self-hosted, SGX1], [self-hosted, SGX2, vsgx]]
        tag: [ubuntu18.04, centos8.2, alinux2]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

    - name: Prepare work
      run: echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV;
        echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;

    - name: Create inclavare development container
      run: |
        docker tag inclavarecontainers/dev:$RUNE_VERSION-centos8.2 inclavare-dev:centos8.2;
        docker tag inclavarecontainers/dev:$RUNE_VERSION-ubuntu18.04 inclavare-dev:ubuntu18.04;
        docker tag inclavarecontainers/dev:$RUNE_VERSION-alinux2 inclavare-dev:alinux2;
        inclavare_dev=$(docker run -itd --privileged --rm --net host -v $GITHUB_WORKSPACE:/root/inclavare-containers inclavare-dev:${{ matrix.tag }});
        echo "inclavare_dev=$inclavare_dev" >> $GITHUB_ENV

    - name: Config git proxy
      run: |
        docker exec $inclavare_dev bash -c 'git config --global http.proxy socks5://localhost:5432'
        docker exec $inclavare_dev bash -c 'git config --global https.proxy socks5://localhost:5432'

    - name: Build and install enclave-tls sdk
      run: docker exec $inclavare_dev bash -c 'cd /root && source /root/.bashrc;
        cp -r inclavare-containers inclavare-containers-$RUNE_VERSION;
        mkdir -p /root/inclavare-containers/${{ matrix.tag }};
        cd inclavare-containers-$RUNE_VERSION/enclave-tls;
        make SGX=1 && make install;
        cp -rf ${{ env.ENCLAVE_TLS_ROOTDIR }} ${{ env.ENCLAVE_TLS_BINDIR }} /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the dev container
      run: docker stop $inclavare_dev

    - name: Create runtime testing container
      run: |
        docker tag ubuntu:18.04 inclavare-test:ubuntu18.04;
        docker tag centos:8.2.2004 inclavare-test:centos8.2;
        docker tag registry.cn-hangzhou.aliyuncs.com/alinux/aliyunlinux inclavare-test:alinux2;
        if ${{ contains(matrix.sgx, 'SGX2') }}; then
            inclavare_test=$(docker run -itd --privileged --rm --net host -v /dev/sgx_enclave:/dev/sgx/enclave -v /dev/sgx_provision:/dev/sgx/provision -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-test:${{ matrix.tag }});
        else
            inclavare_test=$(docker run -itd --privileged --rm --net host --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers -v /var/run/aesmd:/var/run/aesmd inclavare-test:${{ matrix.tag }});
        fi;
        echo "inclavare_test=$inclavare_test" >> $GITHUB_ENV

    - name: Install ubuntu dependency
      if: ${{ contains(matrix.tag, 'ubuntu') }}
      run: |
        docker exec $inclavare_test bash -c 'apt-get update -y && apt-get install -y wget gnupg;
        echo "deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main" | tee /etc/apt/sources.list.d/intel-sgx.list && wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add -;
        apt-get update -y && apt-get install -y libsgx-dcap-quote-verify libsgx-dcap-default-qpl libsgx-dcap-ql-dev libsgx-uae-service'

    - name: Install centos dependency
      if: ${{ contains(matrix.tag, 'centos') }}
      run: |
        docker exec $inclavare_test bash -c 'cd /root/inclavare-containers/${{ matrix.tag }};
        yum -y install yum-utils wget iptables;
        wget -c https://download.01.org/intel-sgx/sgx-linux/2.13/distro/centos8.2-server/sgx_rpm_local_repo.tgz;
        tar xzf sgx_rpm_local_repo.tgz;
        yum-config-manager --add-repo sgx_rpm_local_repo;
        yum makecache;
        yum install --nogpgcheck -y libsgx-dcap-quote-verify libsgx-dcap-default-qpl libsgx-dcap-ql-devel libsgx-uae-service;
        rm -f sgx_rpm_local_repo.tgz'

    - name: Install alinux dependency
      if: ${{ contains(matrix.tag, 'alinux') }}
      run: |
        docker exec $inclavare_test bash -c 'cd /root/inclavare-containers/${{ matrix.tag }};
        yum -y install yum-utils wget tar procps alinux-release-experimentals  protobuf-c-devel-${{ env.ALINUX2_PROTOBUF_C_VERSION }};
        yum-config-manager --add-repo https://enclave-cn-beijing.oss-cn-beijing.aliyuncs.com/repo/alinux/enclave-expr.repo;
        yum makecache;
        yum install --nogpgcheck -y libsgx-ae-le libsgx-ae-pce libsgx-ae-qe3 libsgx-ae-qve \
          libsgx-aesm-ecdsa-plugin libsgx-aesm-launch-plugin libsgx-aesm-pce-plugin libsgx-aesm-quote-ex-plugin \
          libsgx-dcap-default-qpl libsgx-dcap-ql libsgx-dcap-quote-verify \
          libsgx-enclave-common libsgx-launch libsgx-pce-logic libsgx-qe3-logic libsgx-quote-ex \
          libsgx-ra-network libsgx-ra-uefi libsgx-uae-service libsgx-urts sgx-ra-service \
          sgx-aesm-service'

    - name: install enclave-tls
      run: docker exec $inclavare_test bash -c 'mv /root/inclavare-containers/${{ matrix.tag }}/enclave-tls /opt;
        mkdir -p ${{ env.ENCLAVE_TLS_BINDIR }};
        mv /root/inclavare-containers/${{ matrix.tag }}/samples/* ${{ env.ENCLAVE_TLS_BINDIR }};
        cp ${{ env.ENCLAVE_TLS_BINDIR }}/sgx_stub_enclave.signed.so ./'

    - id: random-port-generator1
      uses: ./.github/actions/generate-random-port

    - name: Test enclave tls server for mutual sgx_la
      if: ${{ contains(matrix.sgx, 'SGX2') }}
      run: |
        echo random-port1 ${{ steps.random-port-generator1.outputs.random-port }}
        docker cp /etc/sgx_default_qcnl.conf  $inclavare_test:/etc/
        docker exec $inclavare_test bash -c '${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-server -a sgx_la -v sgx_la -m -p ${{ steps.random-port-generator1.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'sleep 10 && ${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-client -l debug -a sgx_la -v sgx_la -m -p ${{ steps.random-port-generator1.outputs.random-port }}'
        docker restart $inclavare_test

    - id: random-port-generator2
      uses: ./.github/actions/generate-random-port

    - name: Test enclave tls server for mutual sgx_ecdsa
      if: ${{ contains(matrix.sgx, 'SGX2') }}
      run: |
        echo random-port2 ${{ steps.random-port-generator2.outputs.random-port }}
        docker cp /etc/sgx_default_qcnl.conf  $inclavare_test:/etc/
        docker exec $inclavare_test bash -c '${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-server -l debug -a sgx_ecdsa -v sgx_ecdsa -m -p ${{ steps.random-port-generator2.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'sleep 10 && ${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-client -l debug -a sgx_ecdsa -v sgx_ecdsa -m -p ${{ steps.random-port-generator2.outputs.random-port }}'
        docker restart $inclavare_test

    - id: random-port-generator3
      uses: ./.github/actions/generate-random-port

    - name: Test enclave tls server for mutual nullquote
      run: |
        echo random-port3 ${{ steps.random-port-generator3.outputs.random-port }}
        docker exec $inclavare_test bash -c '${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-server -a nullquote -v nullquote -m -p ${{ steps.random-port-generator3.outputs.random-port }}' &
        docker exec $inclavare_test bash -c 'sleep 10 && ${{ env.ENCLAVE_TLS_BINDIR }}/enclave-tls-client -l debug -a nullquote -v nullquote -m -p ${{ steps.random-port-generator3.outputs.random-port }}'

    - name: Clean up the github workspace
      if: ${{ always() }}
      run:
        docker restart $inclavare_test;
        docker exec $inclavare_test bash -c 'rm -rf /root/inclavare-containers/${{ matrix.tag }}'

    - name: Kill the test container
      run: docker stop $inclavare_test
