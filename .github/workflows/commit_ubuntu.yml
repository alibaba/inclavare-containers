name: Run rune on ubuntu with docker and crictl test

# Controls when the action will run. Triggers the workflow on pull request labeled testing-before-checkin.
on:
  pull_request_target:
    types: labeled

jobs:
  # TODO: add rune circtl test on ubuntu image.
  rune_ubuntu:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'testing-before-checkin') }}
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
      with:
        ref: refs/pull/${{ github.event.pull_request.number }}/merge

      # We usually update rune.spec to the latest version before release. Therefore we get the latest version according to rune.spec.
    - name: Get version
      run: echo "RUNE_VERSION=$(grep 'Version:' rune/dist/rpm/rune.spec | awk '{print $2}')" >> $GITHUB_ENV;
        echo "CPU_NUM=$(nproc --all)" >> $GITHUB_ENV

    - name: Create ubuntu container
      run: |
        ubuntu=$(docker run -itd --privileged --rm --net host --device /dev/isgx -v $GITHUB_WORKSPACE:/root/inclavare-containers rune-test:ubuntu18.04)
        echo "ubuntu=$ubuntu" >> $GITHUB_ENV

    - name: Make and install packages on ubuntu
      run:
        docker exec $ubuntu bash -c "cp -r /root/inclavare-containers /root/inclavare-containers-$RUNE_VERSION;
        tar zcf v$RUNE_VERSION.tar.gz inclavare-containers-$RUNE_VERSION;
        cd /root/inclavare-containers-$RUNE_VERSION;
        echo "$RUNE_VERSION" > VERSION;
        find ./ -path "*deb/build.sh" | xargs -I files sed -i '17 d' files;
        find ./ -path "*deb/build.sh" | xargs -I files sed -i '17icp /root/v*.tar.gz \$DEBBUILD_DIR' files;
        make package -j${CPU_NUM};
        dpkg -i rune_$RUNE_VERSION-1_amd64.deb;
        dpkg -i sgx-tools_$RUNE_VERSION-1_amd64.deb"

    - name: Build Occlum Application Image on ubuntu
      run: docker exec $ubuntu bash -c "service docker start"

        docker exec $ubuntu bash -c "occlum-gcc -o hello_world hello_world.c;
        occlum new occlum_instance && cd occlum_instance;
        cp ../hello_world image/bin/ && occlum build;
        occlum package occlum_instance.tar.gz;
        service docker start;
        docker build . -t occlum-app -f /root/Dockerfile-occlum"

    - name: Build skeleton image on ubuntu
      run: |
        docker exec $ubuntu bash -c "cd /root/inclavare-containers/rune/libenclave/internal/runtime/pal/skeleton;
        make -j${CPU_NUM} && cp liberpal-skeleton-v*.so /usr/lib;
        docker build . -t skeleton-enclave -f /root/Dockerfile-skeleton"

    - name: Run Occlum image on ubuntu
      run: docker exec $ubuntu bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/opt/occlum/build/lib/libocclum-pal.so -e ENCLAVE_RUNTIME_ARGS=occlum_instance occlum-app"

    - name: Run skeleton-v1.so on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v1.so -e ENCLAVE_RUNTIME_ARGS=debug skeleton-enclave"

    - name: Run skeleton-v2.so on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v2.so -e ENCLAVE_RUNTIME_ARGS=debug skeleton-enclave"

    - name: Run skeleton-v3.so on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "docker run -i --rm --runtime=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH=/usr/lib/liberpal-skeleton-v3.so -e ENCLAVE_RUNTIME_ARGS=debug skeleton-enclave"

    - name: Run Occlum bundle on ubuntu
      if: always()
      run: |
        docker exec $ubuntu bash -c "mkdir rootfs;
        docker create --name occlum-app occlum-app;
        docker export occlum-app | tar -C rootfs -xvf -;
        rune spec;
        sed -i '4 c \"terminal\": false,' config.json;
        sed -i '16 c \"cwd\": \"\/\",' config.json;
        sed -i 's#\"sh\"#\"/bin/hello_world\"#g' config.json;
        sed -i 's#\"debug\"#\"occlum_instance\"#g' config.json;
        sed -i 's#/var/run/rune/liberpal-skeleton-v2.so#/opt/occlum/build/lib/libocclum-pal.so#g' config.json;
        rune --debug run occlum-app && rm -rf rootfs config.json"

    - name: Create skeleton bundle on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "mkdir rootfs;
        docker create --name skeleton-enclave skeleton-enclave;
        docker export skeleton-enclave | tar -C rootfs -xvf -;
        cp /etc/resolv.conf rootfs/etc/resolv.conf"

    - name: Run skeleton v2 bundle on ubuntu
      if: always()
      run: |
        docker exec $ubuntu bash -c "mkdir -p /var/run/rune;
        cp /usr/lib/liberpal-skeleton-v2.so /var/run/rune/liberpal-skeleton-v2.so;
        rune spec;
        sed -i '4 c \"terminal\": false,' config.json;
        sed -i '16 c \"cwd\": \"\/\",' config.json;
        rune --debug run ra"

    - name: Generate skeleton ra config.json on ubuntu
      if: always()
      run: | 
        docker exec $ubuntu bash -c "sed -i '161,163d' config.json;
        sed -i 's/\/var\/run\/rune\/liberpal-skeleton-v2.so/\/usr\/lib\/liberpal-skeleton-v3.so/g' config.json;
        sed -i '10 c  \"sh\",\"wait_timeout\",\"6000\"' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_is_linkable\": \"false\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_subscription_key\": \"${{ secrets.SUB_KEY }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_epid_spid\": \"${{ secrets.SPID }}\",' config.json;
        sed -i '144 a \"enclave.attestation.ra_type\":\"EPID\",' config.json;"

    - name: Run skeleton v3 bundle on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "rune --debug run skeleton-enclave-container" &

    - name: Get remote report with rune attest command with skeleton on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "sleep 10;
        rune --debug attest --isRA --linkable=false --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }} skeleton-enclave-container"

    - name: Get local report with rune attest command with skeleton on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "rune --debug attest --reportFile=/report.bin skeleton-enclave-container"

    - name: Get target info with sgx-tools on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "cd rootfs;
        sgx-tools -verbose gen-qe-target-info"

    - name: Get quote with sgx-tools on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "cd rootfs;
        sgx-tools -verbose gen-quote --report report.bin --spid=${{ secrets.SPID }}"

    - name: Get remote report with sgx-tools on ubuntu
      if: always()
      run: docker exec $ubuntu bash -c "cd rootfs;
        sgx-tools -verbose get-ias-report --quote quote.bin --spid=${{ secrets.SPID }} --subscription-key=${{ secrets.SUB_KEY }}"

    - name: Kill the container
      run: docker stop $ubuntu
